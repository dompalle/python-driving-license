# import modules
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt

# import the dataframes
print('raw experimental data of arsenic oxide III (As2O3) consumption in hydrogen charging electrochemical cell:')
dfexp05 = pd.read_excel('C:\\Users\\lucap\\OneDrive - Politecnico di Milano\\Desktop\\Python Test\\As_cons_05.xlsx')
print('cathodic current density = 0.5 [mA/cm^2]')
print(dfexp05)
dfexp1 = pd.read_excel('C:\\Users\\lucap\\OneDrive - Politecnico di Milano\\Desktop\\Python Test\\As_cons_1.xlsx')
print('cathodic current density = 1 [mA/cm^2]')
print(dfexp1)
dfexp5 = pd.read_excel('C:\\Users\\lucap\\OneDrive - Politecnico di Milano\\Desktop\\Python Test\\As_cons_5.xlsx')
print('cathodic current density = 5 [mA/cm^2]')
print(dfexp5)

# enter cathodic current density, duration of the test, total sample surface, maximum loss of reagent, initial reagent.
print('insert test parameters')

selected = False
while not selected:
    ic = float(input('enter cathodic current density in [mA/cm^2]:'))
    if (ic != 0.5 and ic != 1 and ic != 5):
        print ("Error! experimental data for As2O3 consumption are available only for an ic of 0.5, 1 and 5 [mA/cm^2]. please insert one of the available ic")
    else:
        selected = True

duration = float(input('enter test duration in [h]:'))
surface = float(input('enter total cathodic surface in [cm^2]:'))
init_reag = float(input('enter initial reagent mass in [mg]:'))
reag_loss = float(input('enter maximum reagent loss allowed in [%]:'))
# fixed parameters and relations
max_loss = init_reag*reag_loss/100
h = 3600
print(f'the electrochemical test will last {duration} [h], applied cathodic current density is {ic} [mA/cm^2], the total cathodic surface amount to {surface} [cm^2]. {init_reag} [mg] of As2O3 will be added as reagent at the beginning, and the maximum reduction tolerated of the reagent will be {reag_loss} [%]')

#calculate the amount of arsenic to reintroduce in solution
if ic == 0.5:
    xexp = dfexp05['C 05'].values.reshape(-1, 1)
    yexp = dfexp05['mg As2O3 05'].values.reshape(-1, 1)
if ic == 1:
    xexp = dfexp1['C 1'].values.reshape(-1, 1)
    yexp = dfexp1['mg As2O3 1'].values.reshape(-1, 1)
if ic == 5:
    xexp = dfexp5['C 5'].values.reshape(-1, 1)
    yexp = dfexp5['mg As2O3 5'].values.reshape(-1, 1)

theta_fit = np.linalg.inv(xexp.T.dot(xexp)).dot(xexp.T).dot(yexp)
theta = float(theta_fit)

#plot the line describing consumtion of arsenic vs coulomb
x = np.arange(1,duration*h*ic*surface/1000)
y = x*theta
plt.plot(x,y, label = f'linear fitting {ic} mA/cm^2')
c = np.interp(max_loss, y, x) 
t = c/surface/ic/h*1000
if t >= duration:
    print('no As2O3 should be added during the test')
else:
    print(f"every {int(t)} hours after the test beginning, {max_loss} mg of As2O3 should be reintroduced in the solution to restabilish the initial As2O3 concentration")

#print plot
plt.scatter(dfexp05['C 05'], dfexp05['mg As2O3 05'], label = "0.5 mA/cm^2")
plt.scatter(dfexp1['C 1'], dfexp1['mg As2O3 1'], label = "1 mA/cm^2")
plt.scatter(dfexp5['C 5'], dfexp5['mg As2O3 5'], label = "5 mA/cm^2")
plt.title('Consumed As2O3 vs Coulomb')
plt.xlabel('Coulomb [C]')
plt.ylabel('Consumed As2O3 [mg]')
plt.legend(loc="upper left")
plt.show()
